/**
 * tilt
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.20.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';
import { V1ObjectMeta } from './v1ObjectMeta';
import { V1alpha1ImageMapSpec } from './v1alpha1ImageMapSpec';
import { V1alpha1ImageMapStatus } from './v1alpha1ImageMapStatus';

/**
* ImageMap expresses the mapping from an image reference to a real, pushed image in an image registry that a container runtime can access.  Another way to think about the ImageMap is that ImageMapSpec is a mutable image reference (where the image might not exist yet), but ImageMapStatus is an immutable image reference (where, if an image is specified, it always exists).  ImageMap does not specify how the image is built or who is responsible for building this. But any API that builds images should produce an ImageMap.  For example, a builder that builds to a local image registry might create a map from: \'my-apiserver:dev\' to \'localhost:5000/my-apiserver:content-based-label\'.  ImageMap doesn\'t follow the usual Kubernetes-style API semantics (where the Status is the result of running the Spec). It\'s closer to a ConfigMap. Though the Status does represent a real runtime result (an image in a registry).
*/
export class V1alpha1ImageMap {
    /**
    * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    */
    'apiVersion'?: string;
    /**
    * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    */
    'kind'?: string;
    'metadata'?: V1ObjectMeta;
    'spec'?: V1alpha1ImageMapSpec;
    'status'?: V1alpha1ImageMapStatus;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "apiVersion",
            "baseName": "apiVersion",
            "type": "string"
        },
        {
            "name": "kind",
            "baseName": "kind",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "V1ObjectMeta"
        },
        {
            "name": "spec",
            "baseName": "spec",
            "type": "V1alpha1ImageMapSpec"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "V1alpha1ImageMapStatus"
        }    ];

    static getAttributeTypeMap() {
        return V1alpha1ImageMap.attributeTypeMap;
    }
}

